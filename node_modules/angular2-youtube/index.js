import { Component, Directive, ElementRef, Injectable, NgModule, Pipe } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Headers, Http, RequestOptions } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/debounceTime';
import 'rxjs/add/operator/distinctUntilChanged';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/switchMap';
import 'rxjs/add/operator/toPromise';

var SampleComponent = (function () {
    function SampleComponent() {
    }
    return SampleComponent;
}());
SampleComponent.decorators = [
    { type: Component, args: [{
                selector: 'sample-component',
                template: "<h1>Integration</h1>"
            },] },
];
/**
 * @nocollapse
 */
SampleComponent.ctorParameters = function () { return []; };

var SampleDirective = (function () {
    /**
     * @param {?} el
     */
    function SampleDirective(el) {
        this.el = el;
    }
    return SampleDirective;
}());
SampleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[sampleDirective]'
            },] },
];
/**
 * @nocollapse
 */
SampleDirective.ctorParameters = function () { return [
    { type: ElementRef, },
]; };

/**
 * Transforms any input value
 */
var SamplePipe = (function () {
    function SamplePipe() {
    }
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    SamplePipe.prototype.transform = function (value, args) {
        if (args === void 0) { args = null; }
        return value;
    };
    return SamplePipe;
}());
SamplePipe.decorators = [
    { type: Pipe, args: [{
                name: 'samplePipe'
            },] },
    { type: Injectable },
];
/**
 * @nocollapse
 */
SamplePipe.ctorParameters = function () { return []; };

var SampleService = (function () {
    function SampleService() {
    }
    return SampleService;
}());
SampleService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
SampleService.ctorParameters = function () { return []; };

var HttpUtilService = (function () {
    function HttpUtilService() {
        this.API_Youtube = 'https://www.googleapis.com/youtube/v3/playlistItems?';
    }
    /**
     * @param {?} path
     * @return {?}
     */
    HttpUtilService.prototype.url = function (path) {
        return this.API_Youtube + path;
    };
    /**
     * @return {?}
     */
    HttpUtilService.prototype.headers = function () {
        var /** @type {?} */ headersParams = { 'Content-Type': 'application/json' };
        var /** @type {?} */ headers = new Headers(headersParams);
        var /** @type {?} */ options = new RequestOptions({ headers: headers });
        return options;
    };
    /**
     * @param {?} response
     * @return {?}
     */
    HttpUtilService.prototype.extrairDados = function (response) {
        var /** @type {?} */ data = response.json();
        return data || {};
    };
    /**
     * @param {?} erro
     * @return {?}
     */
    HttpUtilService.prototype.processarErros = function (erro) {
        console.log(erro.status);
        return Observable.throw(erro.status);
    };
    return HttpUtilService;
}());
HttpUtilService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
HttpUtilService.ctorParameters = function () { return []; };

// Operators
var YoutubePlaylistService = (function () {
    /**
     * @param {?} http
     * @param {?} httpUtil
     */
    function YoutubePlaylistService(http, httpUtil) {
        this.http = http;
        this.httpUtil = httpUtil;
    }
    /**
     * @param {?} key
     * @param {?} playlistId
     * @return {?}
     */
    YoutubePlaylistService.prototype.getplaylist = function (key, playlistId) {
        return this.http.get(this.httpUtil.url("part=snippet&playlistId=" + playlistId + "&key=" + key), this.httpUtil.headers())
            .map(this.httpUtil.extrairDados)
            .catch(this.httpUtil.processarErros);
    };
    /**
     * @param {?} key
     * @param {?} playlistId
     * @param {?} pageToken
     * @return {?}
     */
    YoutubePlaylistService.prototype.playlistList_page = function (key, playlistId, pageToken) {
        return this.http.get(this.httpUtil.url("part=snippet&pageToken=" + pageToken + "&playlistId=" + playlistId + "&key=" + key), this.httpUtil.headers())
            .map(this.httpUtil.extrairDados)
            .catch(this.httpUtil.processarErros);
    };
    return YoutubePlaylistService;
}());
YoutubePlaylistService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
YoutubePlaylistService.ctorParameters = function () { return [
    { type: Http, },
    { type: HttpUtilService, },
]; };

var Playlist = (function () {
    /**
     * @param {?=} kind
     * @param {?=} etag
     * @param {?=} itens
     * @param {?=} pageInfo
     */
    function Playlist(kind, etag, itens, pageInfo) {
        this.kind = kind;
        this.etag = etag;
        this.itens = itens;
        this.pageInfo = pageInfo;
    }
    return Playlist;
}());

var SampleModule = (function () {
    function SampleModule() {
    }
    /**
     * @return {?}
     */
    SampleModule.forRoot = function () {
        return {
            ngModule: SampleModule,
            providers: [SampleService, YoutubePlaylistService, HttpUtilService]
        };
    };
    return SampleModule;
}());
SampleModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    SampleComponent,
                    SampleDirective,
                    SamplePipe
                ],
                exports: [
                    SampleComponent,
                    SampleDirective,
                    SamplePipe,
                    YoutubePlaylistService,
                    HttpUtilService
                ]
            },] },
];
/**
 * @nocollapse
 */
SampleModule.ctorParameters = function () { return []; };

export { SampleModule, SampleComponent, SampleDirective, SamplePipe, SampleService, YoutubePlaylistService, HttpUtilService, Playlist };
